//----------------------------------------------------------------------------------------------------------------------------------
//
//							Author: Sonikku
//
//                              ______
//	                      _.-*'"      "`*-._
//	                _.-*'                  `*-._
//	             .-'                            `-.
//	  /`-.    .-'                  _.              `-.
//	 :    `..'                  .-'_ .                `.
//	 |    .'                 .-'_.' \ .                 \
//	 |   /                 .' .*     ;               .-'"
//	 :   L                    `.     | ;          .-'
//	  \.' `*.          .-*"*-.  `.   ; |        .'
//	  /      \        '       `.  `-'  ;      .'
//	 : .'"`.  .       .-*'`*-.  \     .      (_
//	 |              .'        \  .             `*-.
//	 |.     .      /           ;                   `-.
//	 :    db      '       d$b  |                      `-.
//	 .   :PT;.   '       :P"T; :                         `.
//	 :   :bd;   '        :b_d; :                           \
//	 |   :$$; `'         :$$$; |                            \
//	 |    TP              T$P  '                             ;
//	 :                        /.-*'"`.                       |
//	.sdP^T$bs.               /'       \
//	$$$._.$$$$b.--._      _.'   .--.   ;
//	`*$$$$$$P*'     `*--*'     '  / \  :
//	   \                        .'   ; ;
//	    `.                  _.-'    ' /
//	      `*-.                      .'
//	          `*-._            _.-*'
//	               `*=--..--=*'
//
//
//					FILENAME: extflash.c
//					Purpose: Interface library for serial flash memories
//                           EN25Q32A, M95640W and others
//					Dependencies:
//						1. An SPI peripheral
//
//
//
//----------------------------------------------------------------------------------------------------------------------------------

// Included headers
//------------------

#include "extflash.h"
#include "spi.h"
#include "stm32f0xx_gpio.h"

// Locals
//-------


// Functions
//-----------------

// Name: ReadStatus
// Function: Read status register of memory device
unsigned char ReadFlashStatus(void){

	unsigned char status;

	GPIO_ResetBits(GPIOC, FLASH_CS);
	SPITransceive(RDSR, MSB_FIRST);
	status = SPITransceive(0x00, MSB_FIRST);
	GPIO_SetBits(GPIOC, FLASH_CS);
	return status;
}


// Helper functions
//--------------------------------------------------

//--------------------------------------------------
// Name: ReadFlash
// Function: Read data from FLASH memory
// Parameters:
// Returns:
//--------------------------------------------------
int ReadFlash(void){

	GPIO_ResetBits(GPIOC, FLASH_CS);		// lower CS
	SPITransceive(READ, MSB_FIRST);			// Send cmd
	SPITransceive(0x00, MSB_FIRST);			// High address
	SPITransceive(0x00, MSB_FIRST);			// Low address
	SPITransceive(0x00, MSB_FIRST);			// Retrieve the data
	GPIO_SetBits(GPIOC, FLASH_CS);			// raise CS

	return 0;
}
