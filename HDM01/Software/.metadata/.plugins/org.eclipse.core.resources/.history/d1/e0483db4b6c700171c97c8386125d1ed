//----------------------------------------------------------------------------------------------------------------------------------
//
//							Author: Sonikku
//
//                              ______
//	                      _.-*'"      "`*-._
//	                _.-*'                  `*-._
//	             .-'                            `-.
//	  /`-.    .-'                  _.              `-.
//	 :    `..'                  .-'_ .                `.
//	 |    .'                 .-'_.' \ .                 \
//	 |   /                 .' .*     ;               .-'"
//	 :   L                    `.     | ;          .-'
//	  \.' `*.          .-*"*-.  `.   ; |        .'
//	  /      \        '       `.  `-'  ;      .'
//	 : .'"`.  .       .-*'`*-.  \     .      (_
//	 |              .'        \  .             `*-.
//	 |.     .      /           ;                   `-.
//	 :    db      '       d$b  |                      `-.
//	 .   :PT;.   '       :P"T; :                         `.
//	 :   :bd;   '        :b_d; :                           \
//	 |   :$$; `'         :$$$; |                            \
//	 |    TP              T$P  '                             ;
//	 :                        /.-*'"`.                       |
//	.sdP^T$bs.               /'       \
//	$$$._.$$$$b.--._      _.'   .--.   ;
//	`*$$$$$$P*'     `*--*'     '  / \  :
//	   \                        .'   ; ;
//	    `.                  _.-'    ' /
//	      `*-.                      .'
//	          `*-._            _.-*'
//	               `*=--..--=*'
//
//
//					FILENAME: dir.c
//					Purpose: Control library for Burr-Brown PCM9210/9211 Digital Audio interface
//					Dependencies:
//						1. An SPI peripheral
//
//
//
//----------------------------------------------------------------------------------------------------------------------------------

#include "dir.h"
#include "stm32f0xx_gpio.h"
#include "spi.h"


unsigned char Fs;				// Sampling frequency variable
unsigned char WS;				// Word size variable
unsigned char LOCK;				// Signal Lock flag

GPIO_InitTypeDef        GPIO_InitStructure;
EXTI_InitTypeDef   		EXTI_InitStructure;
NVIC_InitTypeDef        NVIC_InitStructure;


//-----------------------------------------------
// Common interrupt handler for 2-3
// Assigned to the DIR IRQ pin
//----------------------------------------------
void EXTI2_3_IRQHandler(void) {
	unsigned char DIR_IRQ_FLAGS;
	unsigned char tmp;

    if (EXTI_GetITStatus(EXTI_Line3)){
    	ReadDIRReg(0x2C, &DIR_IRQ_FLAGS);			// Retrieve the interrupt flags in the DIR
        EXTI_ClearITPendingBit(EXTI_Line3);			// Clear interrupt flag

        // DIR is still possibly asserting the IRQ line...

        // Handle errors...
        if((DIR_IRQ_FLAGS & 0x80) == 0x80){
        	// Bit 7 (ERROR) flag is set.... (pg 69 datasheet)
        	LOCK = 0;

        } else {
        	LOCK = 1;
        }

    }
}




// Name: ReadDIRReg
// Function: Read a register within the PCM9210/9211
// Parameters: Register address, address where read shall be stored
// Returns: void
//------------------------------------------------------------------
void ReadDIRReg(unsigned char regaddr, unsigned char *regdata){
	unsigned char RADR;
	unsigned char REGDR;

	RADR = regaddr & 0x7F;
	RADR |= 0x80;								// MSB = 1 for READ
	GPIO_ResetBits(GPIOA, SS_DIR);				// Lower ~SS
	SPITransceive(RADR, MSB_FIRST);				// Send address word
	REGDR = SPITransceive(0x00, MSB_FIRST);		// Send data as 0x00 to read SPI
	GPIO_SetBits(GPIOA, SS_DIR);				// Raise ~SS
	*regdata = REGDR;
}

// Name: WriteDIRReg
// Function: Write a register within the PCM9210/9211
// Parameters: Register Address, Value to be written
// Returns: void
//-----------------------------------------------------------------------
void WriteDIRReg(unsigned char regaddr, unsigned char regdata){
	unsigned char RADR;
	RADR = regaddr & 0x7F;
	RADR &= ~0x80;								// MSB = 0 for WRITE
	GPIO_ResetBits(GPIOA, SS_DIR);				// Lower ~SS
	SPITransceive(RADR, MSB_FIRST);				// Send address word
	SPITransceive(regdata, MSB_FIRST);			// Send data word
	GPIO_SetBits(GPIOA, SS_DIR);				// Raise ~SS
}


// Name: InitDIR
// Function: Reset PCM9210/9211 and bring it into initial state
// Parameters: void
// Returns: void
//---------------------------------------------------------------
void InitDIR(void){

	unsigned char temp;
	GPIO_SetBits(GPIOA, SS_DIR);				// Ensure ~SS pin is pulled high
	GPIO_SetBits(GPIOC, RESET_DIR);				// Release reset from DIR


    // Configure DIR's interrupt pin and operational mode
    //----------------------------------------------------
    WriteDIRReg(0x20, 0x04);					// Pin configured as INT0
    WriteDIRReg(0x25, 0x01);					// Error cause Reg = Samp Freq Change and PLL Lock errors 0x21
    WriteDIRReg(0x2A, 0x7F);					// ERROR interrupt is unmasked
    ReadDIRReg(0x2C, &temp);					// Clear all interrupt bits by reading
    WriteDIRReg(0x2E, 0x00);					// INT0 is configured for negative logic.
    ReadDIRReg(0x2C, &temp);



	// Configure PB3 as an input
    GPIO_InitStructure.GPIO_Pin = nIRQ;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_Init(GPIOB, &GPIO_InitStructure);


	// Configure PB3 as an interrupt input (connected to the DIR's IRQ pin)
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource3);		// IRQ/ERROR pin -> PB3
    EXTI_InitStructure.EXTI_Line = EXTI_Line3;							// IRQ line 3
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;				// Falling Edge
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;							// Enable it
    EXTI_Init(&EXTI_InitStructure);


    // Enable IRQ capability on GPIO pin
    // Enable GPIO IRQ channel covering 2 to 3
    //-------------------------------------------------
    NVIC_InitStructure.NVIC_IRQChannel = EXTI2_3_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0x00;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

	// Clear variables
	Fs = 0;
	WS = 0;
	LOCK = 0;

}

// Name: GetSPDIFInfo
// Function: Retrieve specific info from the S/PDIF stream
//           We need the word length (Very important)
//			 We need to know if we're being fed a Dolby Digital or other compressed stream (we need to mute the DAC)
// Parameters: void
// Returns: 0 if successful, -1 if failed (failure is returned if the DIR is not locked to an external digital source)
//----------------------------------------------------------------------------------------------------------------------
int GetSPDIFInfo(void){
	int result = -1;
	unsigned char tempA;
	unsigned char tempB;
	unsigned char tempC;
	unsigned char tempD;
	unsigned char tempE;
	unsigned char tempF;


	ReadDIRReg(0x5A, &tempA);				// The transmitter we use (VIA Envy24 sound card)
	ReadDIRReg(0x5B, &tempB);				// Sends all these bits as '0'... stupid motherfucking cunts!!!
	ReadDIRReg(0x5C, &tempC);				// Looking into hacking the Windows Driver..
	ReadDIRReg(0x5D, &tempD);
	ReadDIRReg(0x5E, &tempE);
	ReadDIRReg(0x5F, &tempF);
	return result;
}

// Name: GetCalcFs
// Function: Use hardware features in the DIR to measure the PCM sampling rate
//           We need this for the VU meter
// Parameters: void
// Returns: 0 if complete, -1 if failed (usually due to no suitable digital signal or no signal)
//------------------------------------------------------------------------------------------------
int GetCalcFs(void){
	int result = -1;
	unsigned char temp;
	WriteDIRReg(0x37, 0x00);				// Set DIR port for target of measurement
	ReadDIRReg(0x39, &temp);
	if((temp & 0x80) == 0x80){
		return -1;							// Busy with measurement, return -1;
	}

	// We seem to have a measurement
	if((temp & 0x0F) > 0){
		Fs = temp & 0x0F;					// We have valid measurement, store it!
		return 0;							// Got measurement, return good status
	}

	return result;
}
