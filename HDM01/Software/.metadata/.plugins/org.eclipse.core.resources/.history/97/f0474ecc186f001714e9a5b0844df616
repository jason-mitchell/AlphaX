//
//							Author: Sonikku
//
//                              ______
//	                      _.-*'"      "`*-._
//	                _.-*'                  `*-._
//	             .-'                            `-.
//	  /`-.    .-'                  _.              `-.
//	 :    `..'                  .-'_ .                `.
//	 |    .'                 .-'_.' \ .                 \
//	 |   /                 .' .*     ;               .-'"
//	 :   L                    `.     | ;          .-'
//	  \.' `*.          .-*"*-.  `.   ; |        .'
//	  /      \        '       `.  `-'  ;      .'
//	 : .'"`.  .       .-*'`*-.  \     .      (_
//	 |              .'        \  .             `*-.
//	 |.     .      /           ;                   `-.
//	 :    db      '       d$b  |                      `-.
//	 .   :PT;.   '       :P"T; :                         `.
//	 :   :bd;   '        :b_d; :                           \
//	 |   :$$; `'         :$$$; |                            \
//	 |    TP              T$P  '                             ;
//	 :                        /.-*'"`.                       |
//	.sdP^T$bs.               /'       \
//	$$$._.$$$$b.--._      _.'   .--.   ;
//	`*$$$$$$P*'     `*--*'     '  / \  :
//	   \                        .'   ; ;
//	    `.                  _.-'    ' /
//	      `*-.                      .'
//	          `*-._            _.-*'
//	               `*=--..--=*'
//
//
//					FILENAME: timers.c
//					Purpose: General-purpose timer functions using a timer interrupt
//
//
//
//-------------------------------------------------------------------------------------------------------------------------

// Includes
//----------

#include "timers.h"

// Local Variables
//----------------

unsigned int TimerVar;


// Individual Timer entity
typedef struct{
	unsigned char name[8];			// Name given to it in ASCII
	unsigned char state;			// Status byte (where 0 = expired or inactive, 1 = running)
	unsigned int timervar;			// Count-down variable loaded with a value that is decremented
}timer_entity;

// Collection of timer resources
typedef struct{
	timer_entity timerobj[8];
}timerCB;

//----------------------------------------------------------------------------
// Name: TimerSvc
// Function: Timer Servicing routine - called in your timer interrupt handler
// Parameters: void
// Returns: void
//-----------------------------------------------------------------------------
void TimerSvc(void){
	unsigned int r;
	unsigned char state_test;
	// This routine is based on the assumption that it shall be called exactly at 1.00mS intervals

	// Here we go thru a list of timers that might, or might not be active
	for(r = 0; r < 8; r++){
		state_test = timerCB.timer_entity[r].state;
	}

}

