//-----------------------------------------------------------------------------------------------------------------------------
//
//									Filename: spi.c
//				Bit-banged SPI interface for micros that lack the hardware resource
//				Author: Sonic2k
//				Date: 27.08.2017
//
//				This code assumes you already configured the GPIO and defined the names in bsp.h
//-----------------------------------------------------------------------------------------------------------------------------
#include "spi.h"
#include "bsp.h"
#include "stm32f0xx_gpio.h"


// Local Vars, constants, etc
//----------------------------
unsigned char SPI_STAT;


// Functions
//----------------------------

//------------------------------------
// Name: GetSPIStatus
// Function: Return SPI status flag
//------------------------------------
unsigned char GetSPIStatus(void){

	return SPI_STAT;

}

//------------------------------------
// Name: SetSPIStatus
// Function: Set the SPI status flag
//------------------------------------
void SetSPIStatus(unsigned char state){
	SPI_STAT = state;
}

//---------------------------------------------------------------------
// Name: InitSPI
// Function: Initialize the SPI interface GPIO pins to known levels
//--------------------------------------------------------------------
void InitSPI(void){
	GPIO_ResetBits(GPIOB, MCLK);		// CLK = 0;
	GPIO_ResetBits(GPIOB, MOSI);		// MOSI = 0;

}



//----------------------------------------------------------------------------------------
// Name: SPITransceive
// Function: Perform a bit-banged SPI transaction on the bus
// Parameters: Byte to transmit, bit order (0 = LSB first, 1 = MSB first)
// Returns: Byte received from the receive channel
//----------------------------------------------------------------------------------------
unsigned char SPITransceive(unsigned char data, unsigned char bitorder){
	unsigned char bcnt;
	unsigned char rxd = 0;


	if (bitorder == 0){

		// shift out LSB first
		//--------------------
		for(bcnt = 0; bcnt < 8; bcnt++){
			if((data & 0x01) == 0x01){
				GPIO_SetBits(GPIOB, MOSI);		// MOSI = '1'
			} else {
				GPIO_ResetBits(GPIOB, MOSI);
			}
			data = data >> 1;

			// Clock cycle
			GPIO_SetBits(GPIOB, MCLK);			// Clock = H
			GPIO_ResetBits(GPIOB, MCLK);		// Clock = L

			rxd >>= 1;
			if(GPIO_ReadInputDataBit(GPIOB, MISO) == 1){
				rxd |= 0x80;
			} else {
				rxd &= ~0x80;
			}

		}
	}

	if (bitorder == 1){
		for(bcnt = 0; bcnt < 8; bcnt++){
			if((data & 0x80) == 0x80){
				GPIO_SetBits(GPIOB, MOSI);		// MOSI = '1'
			} else {
				GPIO_ResetBits(GPIOB, MOSI);
			}

			data = data << 1;

			// Clock cycle
			GPIO_SetBits(GPIOB, MCLK);			// Clock = H
		//	GPIO_ResetBits(GPIOB, MCLK);		// Clock = L

			// Sample pin in the middle of the clock pulse as some SPI devices
			// change the MISO pin when the edge falls and we miss the data bit
			rxd <<= 1;
			if(GPIO_ReadInputDataBit(GPIOB, MISO) == 1){
				rxd |= 0x01;
			} else {
				rxd &= ~0x01;
			}
			GPIO_ResetBits(GPIOB, MCLK);		// Clock = L

		}


	}

	return rxd;
}





