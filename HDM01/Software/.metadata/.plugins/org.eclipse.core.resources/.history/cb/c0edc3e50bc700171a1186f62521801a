//----------------------------------------------------------------------------------------------------------------------------------
//
//							Author: Sonikku
//
//                              ______
//	                      _.-*'"      "`*-._
//	                _.-*'                  `*-._
//	             .-'                            `-.
//	  /`-.    .-'                  _.              `-.
//	 :    `..'                  .-'_ .                `.
//	 |    .'                 .-'_.' \ .                 \
//	 |   /                 .' .*     ;               .-'"
//	 :   L                    `.     | ;          .-'
//	  \.' `*.          .-*"*-.  `.   ; |        .'
//	  /      \        '       `.  `-'  ;      .'
//	 : .'"`.  .       .-*'`*-.  \     .      (_
//	 |              .'        \  .             `*-.
//	 |.     .      /           ;                   `-.
//	 :    db      '       d$b  |                      `-.
//	 .   :PT;.   '       :P"T; :                         `.
//	 :   :bd;   '        :b_d; :                           \
//	 |   :$$; `'         :$$$; |                            \
//	 |    TP              T$P  '                             ;
//	 :                        /.-*'"`.                       |
//	.sdP^T$bs.               /'       \
//	$$$._.$$$$b.--._      _.'   .--.   ;
//	`*$$$$$$P*'     `*--*'     '  / \  :
//	   \                        .'   ; ;
//	    `.                  _.-'    ' /
//	      `*-.                      .'
//	          `*-._            _.-*'
//	               `*=--..--=*'
//
//
//					FILENAME: ui.c
//					Purpose: Alpha-X User Interface Implementation
//					Dependencies:
//
//					Abstract: This code handles all user-interface tasks such as the display, remote control, and front panel tasks
//
//
//----------------------------------------------------------------------------------------------------------------------------------

// Included headers
//-----------------

#include "ui.h"
#include "bsp.h"
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include "display.h"
#include "graphic.h"
#include "graphlib.h"
#include "fpanel.h"
#include "stdfonts.h"
#include "clock.h"
#include "string.h"
#include "stm32f0xx_rcc.h"

// Local vars
//------------
unsigned char UI_STATE;
uint16_t UI_TIMING;
uint16_t UI_TIMER1;
uint16_t UI_TIMER2;
unsigned char DATA;
unsigned char TimeDelta;
unsigned char StringBuffer[32];
unsigned char UPDATE_DONE;
unsigned char Param1;
float Decibel;
uint32_t BRIGHTNESS;
unsigned char RAMP_DIRECTION;
uint16_t HOLD_TIME;
uint16_t RAMP_SCALE;

unsigned char INPUT_SELECTOR;

CurrentTime				TimeOfDay;
TIM_TimeBaseInitTypeDef Timer_InitStructure;
GPIO_InitTypeDef        GPIO_InitStructure;
EXTI_InitTypeDef   		EXTI_InitStructure;
NVIC_InitTypeDef        NVIC_InitStructure;



//------------------------------------------------
// Name: WritePWM
// Function: Write PWM value for LED
// Parameter: PWM value
// Returns: void
//-----------------------------------------------
void WritePWM(uint32_t PWM){

    TIM_OCInitTypeDef outputChannelInit = {0,};
    outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
    outputChannelInit.TIM_Pulse = PWM;
    outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
    outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OC4Init(TIM2, &outputChannelInit);
    TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);




}


//--------------------------------------------
// Name: UITimer
// Function: Internal timer for UI operations
//--------------------------------------------
void UITimer(void){

	if(UI_TIMER1 > 0){
		UI_TIMER1--;
	}

	if (UI_TIMER2 > 0){
		UI_TIMER2--;
	}


}


//------------------------------------------
// Name: UIDelay
// Function: Generate a delay in the UI
// Parameters: Required time delay (in mS)
//------------------------------------------
void UIDelay(uint16_t Delay){

	UI_TIMER1 = Delay;
	while(UI_TIMER1 > 0){
		;
	}

}

//-------------------------------------------------------------------
// Name: SendParam
// Function: Send (receive in UI) a parameter for display purposes
// Parameters: value to be passed (unsigned char)
// Returns: void
//------------------------------------------------------------------
void SendParam(unsigned char param){

	Param1 = param;

}



//--------------------------------------
// Name: InitUI
// Function: Initialize the UI
//--------------------------------------
void InitUI(void){

    // TIM2 Module Configured for PWM on PB11 (Power LED inside the Marquardt Push Button)
    //--------------------------------------------------------------------------------------

    Timer_InitStructure.TIM_Prescaler = 1200;
    Timer_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
    Timer_InitStructure.TIM_Period = 500;		// PWM period value
    Timer_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    Timer_InitStructure.TIM_RepetitionCounter = 0;
    TIM_TimeBaseInit(TIM2, &Timer_InitStructure);
    TIM_Cmd(TIM2, ENABLE);

    // Output Compare configuration to drive PWM into the LED
    //--------------------------------------------------------
    TIM_OCInitTypeDef outputChannelInit = {0,};
    outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
    outputChannelInit.TIM_Pulse = 2;	// PWM duty cycle  @ 25 LED quite bright  4 = nice and dim (needle pulse width)
    outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
    outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OC4Init(TIM2, &outputChannelInit);
    TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);

    // Initialize interrupt for headphone jack and push button in encoder
    //--------------------------------------------------------------------

    // PB10 (MENU) and PB4 (JACK)
    GPIO_InitStructure.GPIO_Pin = MENU | PHONE_JACK;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOB, &GPIO_InitStructure);

    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource10);		// EXTI PB10
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource4);		// EXTI PB4

    EXTI_InitStructure.EXTI_Line = EXTI_Line10;
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;				// Falling edge only
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;							// Is enabled!
    EXTI_Init(&EXTI_InitStructure);

    EXTI_InitStructure.EXTI_Line = EXTI_Line4;
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;		// Both edges i.e. plug in / plug out
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;							// Is enabled!
    EXTI_Init(&EXTI_InitStructure);


	// Initialize all the variables in this module
	UI_STATE = 0xFF;
	UI_TIMING = 100;
	UI_TIMER1 = 0;
	UI_TIMER2 = 0;
	UPDATE_DONE = false;
	BRIGHTNESS = 0;
	RAMP_DIRECTION = 0;
	HOLD_TIME = 0;
	RAMP_SCALE = 0;
	INPUT_SELECTOR = INPUT_1;


	// Initialize the display
	ShiftBsline(0);					// Very important, as graphlib doesn't have an init or class constructor
    ResetDisplay();
    SetInverse(false, 0);
    InitDisplay();

    // Load boot graphic
    PutGraphic(Graphic1);
    UIDelay(1000);									// Logo remains for 1 second
    ClearDisplay();

    // Initialize the ASIC on the front panel
	FpReadWrite(READ_VENDOR_ID, 0, &DATA);			// Read specific info from the chip
	if(DATA != 0xAE){
		// Vendor ID mismatch, display error code and halt
		SetXY(0, 0);
        OutString("E001", Font1);
        UpdateFromFB();
        while(1);

	}
	FpReadWrite(READ_CHIP_ID, 0, &DATA);			// Read specific info from the chip
	if(DATA != 0x71){
		// Product ID mismatch, display error code and halt
		SetXY(0, 0);
        OutString("E002", Font1);
        UpdateFromFB();
        while(1);

	}


}

// Name: ChangeUIState
// Function: Change UI between three primary modes
//-------------------------------------------------
void ChangeUIState(unsigned char new_state){


	// Handle changes specific to the states
	if(new_state == STANDBY){
		SetDispIntensity(1);								// Lower brightness
		WritePWM(2);
	}

	if (new_state == ACTIVE || new_state == SWITCH_ON){
        SetDispIntensity(4);								// Raise brightness
        WritePWM(400);

	}

	if(new_state == VOLUME){
		UI_TIMER2 = 1000;
	}

	//ClearFB();
	UI_STATE = new_state;
	UPDATE_DONE = false;

}

//-------------------------------------------------------------------------------
// Name: BreatheLED
// Function: Execute breathing of the LED in the button when system in standby
// Parameters: void
// Returns: void
//-------------------------------------------------------------------------------
void BreatheLED(void){

	if(RAMP_SCALE > 4){
		RAMP_SCALE = 0;

		if(UI_STATE == STANDBY){

			// Hold at dim
			if(HOLD_TIME > 0){
				HOLD_TIME--;
			} else {

				// Ramp down
				if(RAMP_DIRECTION == 1){
					if(BRIGHTNESS > 4){
						BRIGHTNESS--;
					} else {
						RAMP_DIRECTION = 0;
						HOLD_TIME = 1000;			// Time spent dim
					}
				} else {
					// Ramp up
					if(BRIGHTNESS < 450){
						BRIGHTNESS++;
					} else {
						RAMP_DIRECTION = 1;
					}
				}
				WritePWM(BRIGHTNESS);
			}
		}
	}
	RAMP_SCALE++;
}
//-------------------------------------------------------------------------
// Name: UILoop
// Function: User Interface service function
// This is called at a rate of 1mS from the timer tick
//-------------------------------------------------------------------------
void ServiceUI(void){

	BreatheLED();
	UITimer();
	UI_TIMING--;
	if(UI_TIMING == 0){
		UI_TIMING = 100;

		// UI / Display update rate is 100mS
		//-----------------------------------
		switch(UI_STATE){

		// User interface functions in standby mode... display the clock
		case STANDBY:
			GetTimeNow(&TimeOfDay);
			if (TimeDelta != TimeOfDay.second){
				TimeDelta = TimeOfDay.second;
				SetXY(0, 0);
				ClearFB();
				memset(StringBuffer, 0, 32);
				sprintf(StringBuffer, "%2d:%02d:%02d", TimeOfDay.hour, TimeOfDay.minute, TimeOfDay.second);
				OutString(StringBuffer, Font1);
				UpdateFromFB();
			}
			break;

		// User interface functions in ACTIVE mode... display info
		case ACTIVE:
			ClearFB();

			// Display the currently selected input (programme source)
			SetXY(0, 0);
			SetInverse(true, 0x7F);
			switch(INPUT_SELECTOR){

			case INPUT_1:
				ShiftBsline(1);
				OutString("INPUT 1", Font3);
				ShiftBsline(0);
				break;

			case INPUT_2:
				ShiftBsline(1);
				OutString("INPUT 2", Font3);
				ShiftBsline(0);
				break;

			case INPUT_3:
				ShiftBsline(1);
				OutString("INPUT 3", Font3);
				ShiftBsline(0);
				break;

			}

			// Display information about the signal
			SetXY(0, 1);
			SetInverse(true, 0xFE);
			OutString("24/192", Font3);



			SetInverse(false, 0);
			UpdateFromFB();
			break;



		case SWITCH_ON:
			if(UPDATE_DONE == false){
				SetXY(0, 0);
				ClearFB();
				OutString("Welcome", Font2);
				UpdateFromFB();
			}
			UPDATE_DONE = true;
			break;

		// User adjusts volume
		case VOLUME:
			SetXY(0, 0);
			ClearFB();
			memset(StringBuffer, 0, 32);
			Decibel = (Param1 - 200) * 0.5;

			sprintf(StringBuffer, "Vol: %0.1f   ", Decibel);
			OutString(StringBuffer, Font2);
			SetXY(90, 0);
			OutString("dB", Font2);
			UpdateFromFB();
			if(UI_TIMER2 == 0){
				ChangeUIState(ACTIVE);
			}

		}
	}
}




